Javaとは
Javaは、世界中にたくさんの開発者がいる有名な言語です。大規模システム、Webアプリケーション、スマートフォンアプリなど、Javaはあなたの周りの様々な場所で活躍しています
Main.javaというファイルのSystem.out.println()の()の中に文字を書くと、コンソールという画面にその文字が表示されます。
例
class Main {
  public static void main(String[] args) {
    System.out.println("Hello Java");
  }
}

Javaの構造
Main.javaには、出力の命令以外にもコードが書いてあります。これらは下図のように、クラス部分、メソッド部分、メソッド内の処理部分に分けられます。
いまはそれぞれの意味を理解する必要はありません。このレッスンでは処理部分にコードを書く、ということだけ抑えておきましょう。
Javaでは文の終わりにセミコロン（;）を付けなければなりません
コメント
「//」と書くことで、そこから行末までがコメントとみなされます

データ型
文字列と整数のデータ型を覚えましょう。Stringは文字の並び、intは整数(integer)を意味する英語です。なおString型のSは大文字、int型のiは小文字である点に注意しましょう

値の代入
変数名 = 値」とするだけで代入することができます
System.out.println()の()に変数をいれると、変数の中に入っている値が出力される
例
class Main {
  public static void main(String[] args) {
    // int型の変数numberを定義してください
    int number;
    // 変数numberに3を代入してください
    number = 3;
    // 変数numberを出力してください
    System.out.println (number);
    // String型の変数nameを定義してください
    String name;
    // 変数nameに"Wanko"を代入してください
    name = "Wanko";
    // 変数nameを出力してください
    System.out.println(name);    
  }
}

変数の初期化
「int number = 3;」「String text = "Hello World";」のように、変数の値の代入は変数定義と同時に行うことができます。
例
class Main {
  public static void main(String[] args) {
    int number1 = 3;
    // int型の変数number2を定義し、7を代入してください
    int number2 = 7;
    // number1 * number2を出力してください
    System.out.println(number1 * number2);
    // 変数textに「プログラミングを勉強しよう」を代入してください
    String text = "プログラミングを勉強しよう";
    // 「Progateで」と変数textを連結して出力してください
    System.out.println("Progateで" + text);
    
  }
}

変数の更新
更新する場合型は書かなくて良い
例
class Main {
  public static void main(String[] args) {
    int number = 11;
    String text = "Ruby";
    System.out.println(number);
    System.out.println(text);
    
    // 変数numberを9で上書きしてください
    number =9;
    
    // 変数numberを出力してください
    System.out.println(number);
    
    // 変数textを「Java」で上書きしてください
    text = "Java";
    
    // 変数textを出力してください
    System.out.println(text);    
  }
}

1を足す、1を引く
変数に1を足す、もしくは1を引く場合は「++」という記号は変数に「1を足す」という意味です。変数xに対してx++とするのは、x += 1と同じ意味になります。反対に--とすると1を引くことができます。
例
class Main {
  public static void main(String[] args) {
    int number = 8;
    
    // 変数numberに7をかけて、変数numberを上書きしてください
    number *=7;
    
    // 変数numberを出力してください
    System.out.println(number);
    
    // 変数numberの値に1を足して、変数numberを上書きしてください
    number ++;
    
    // 変数numberを出力してください
    System.out.println(number);
    
  }
}

キャメルケース
「userName」のように2語以上の変数名を使うときは、単語の始めを大文字にして区切る方法


double型
int型（整数）,小数を表すデータ型も存在します。そのひとつがdouble型です

例
class Main {
  public static void main(String[] args) {
    // double型の変数number1を定義し、8.5を代入してください。
    double number1 = 8.5;
    
    // double型の変数number2を定義し、3.4を代入してください。
    double number2 = 3.4;
    
    // number1にnumber2を足した値を出力してください
    System.out.println(number1 + number2);
   
    // number1からnumber2を引いた値を出力してください
    System.out.println(number1 - number2);
    
  }
}

(変換したいデータ型)値とし強制的に型変換を行います
例
class Main {
  public static void main(String[] args) {
    int number1 = 7;
    int number2 = 2;
    System.out.println(number1 / number2);
    
    // number1をdouble型にキャストし、number2で割った値を出力してください
    System.out.println((double)number1/number2);
    
  }
}

boolean
真偽値のデータ型
trueは真（正しい）、falseは偽（間違っている）

比較演算子
「x == y」はxとyが同じかどうかを比較し、同じであればtrue、違っていればfalseとなります。また「x != y」はその逆になります。
例
class Main {
  public static void main(String[] args) {
    // 「true」を用いて、「真」を表す真偽値を出力してください
    System.out.println(true);
    
    // 「false」を用いて、「偽」を表す真偽値を出力してください
    System.out.println(false);
    
    // 「==」を用いて、値を比較した結果を出力してください
    System.out.println(12 / 4 ==3);
    
    // 「!=」を用いて、値を比較した結果を出力してください
    System.out.println(12 / 4 !=3);
    
    // 変数を定義し、値を比較した結果を代入してください
    boolean bool =3 * 9==27;
    
    // 変数boolの値を出力してください
    System.out.println(bool);
  }
}

かつ
かつは&&で表現し、「条件1 && 条件2」は「条件1がtrueかつ条件2もtrue」であれば結果もtrueになり、
どちらか一方でもfalseであれば結果はfalseになります

または
またはは||で表現し、「条件1 || 条件2」は、「条件1または条件2のどちらか
一方でもtrue」であれば結果はtrueになります。

〜でない
!を用いると、「〜でない」を表現できます。例えば、!(x >= 30)は「xが30以上でない（つまり30より小さい）」ときtrueになり、
「xが30以上」のときfalseになります。
例
class Main {
  public static void main(String[] args) {
    // trueと出力されるようにしてください
    System.out.println(true || false);
    
    // falseと出力されるようにしてください
    System.out.println(false && true);
    
    // 「8 < 5」かつ「3 >= 2」の結果を出力してください
    System.out.println(8 < 5 && 3 >= 2);
    
    // 「8 < 5」または「3 >= 2」の結果を出力してください
    System.out.println(8 < 5 || 3 >= 2);
    
    // 「8 < 5」でない、の結果を出力してください
    System.out.println(!(8 < 5))
  }
}

if文の例
class Main {
  public static void main(String[] args) {
    int number = 12;
    // numberが20より小さいとき、どちらでもないときの条件分岐を追加してください
    if (number < 10) {
      System.out.println("10より小さい");
      }else if(number < 20){
      System.out.println("10以上、20より小さい");
    }else{
       System.out.println("20以上");
    }
  }
}

switch文
条件の値がcaseの値と一致するとき、処理が実行されます

break(ENDと同じ意味）
breakとはswitch文を終了する命令です。breakがないと、合致したcaseの処理を行った後、その次のcaseの処理も実行してしまいます。

default（elseと似ている）
どのcaseとも一致しなかったときに実行する処理を、defaultに指定することができます

例文
class Main {
  public static void main(String[] args) {
    int n = 0;
    
    switch (n) {
      case 1:
        System.out.println("大吉です");
        break;
      case 2:
        System.out.println("中吉です");
        break;
      // defaultを用いて、変数nの値がどのcaseにも合致しない場合の処理を記述してください
      default:
       System.out.println("凶です");
        break;
    }
  }
}

while文
「条件がtrueの間、{ }内の処理を繰り返す」ことができます。
例
class Main {
  public static void main(String[] args) {
    int number = 10;
    
    // while文を用いて、numberが0より大きい場合に繰り返す、繰り返し処理を作ってください
    while(number>0){
      System.out.println(number);
      number--;
    }
  }
}
