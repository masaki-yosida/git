Pythonについて
　　Pythonはシンプルで英語に近く、理解しやすいプログラミング言語です。
　　Pythonを使うとWebアプリケーション開発や機械学習、統計処理などといった様々なことが可能になります。
　　GoogleやFacebookなどのトップIT企業でも開発言語として採用されています。

print ("Hello World")で出力できる、シングルでもダブルでもOK
計算、代入はrubyと変わらない(省略の方法はRubyと変わらない）
変数名は自由につけることができますが、変数名の頭文字を数字にすることはできません。
また、「user_name」のように2語以上の変数名を使うときは、単語と単語の間を _ (アンダーバー)で区切る
数値型を文字列型に変換するには「str」を用います。
age = 24
# age を用いて「私は24歳です」と出力してください
print("私" + str(age) + "歳です")

文字列型を数値型に変換したい場合には「int」を用います。
count = '5'
# count に 1 を足した値を出力してください
print(int(count) + 1)

x = 7 * 10
y = 5 * 6
# x が 70 と等しい場合に「 xは70です 」と出力してください
if x ==70:
  print("xは70です")
# y が 40 と等しくない場合に「 yは40ではありません 」と出力してください
if y != 40:
    print("yは40ではありません")

elif
if文で、条件が成り立たなかった場合を複数定義したい場合は、「elif」を用います。

and
条件1も条件2も成り立つ」というような場合の条件式は「and」を用いて、「条件1 and 条件2」のように書きます。

or
条件1か条件2が成り立つ」というような場合の条件式は「or」を用いて、「条件1 or 条件2」のように書きます。

not
「not」を用いると、条件の否定をすることができます。
「not 条件式」のようにすると、条件式が「True」であれば全体が「False」
例
x = 20
# 変数 x が 10 以上 30 以下の場合に「 xは10以上30以下です 」と出力してください
if 10 <= x and x <= 30 :
    print("xは10以上30以下です")


y = 60
# 変数 y が 10 未満または 30 より大きい場合に「 yは10未満または30より大きいです 」と出力してください
if y<10 or 30<y:
  print("yは10未満または30より大きいです")


z = 55
# 変数 z が 77 ではない場合に「 zは77ではありません 」と出力してください
if not z == 77:
    print("zは77ではありません")

apple_price = 200
# input を用いて入力を受け取り、変数 input_count に代入してください
input_count = input("購入するりんごの個数を入力してください：") (入力できるようにする）
# input_count を数値として代入してください
count = int(input_count)
total_price = apple_price * count
print('購入するりんごの個数は' + str(count) + '個です')
print('支払い金額は' + str(total_price) + '円です')

入力を受け取ろう
input」を用いると、コードを実行した際にコンソールに文字を入力できるようになり、その入力された値を受け取ることができます。
「変数 = input('コンソールに表示したい文字列')」のように使うとコンソールに入力された値が変数に代入されます。
例
apple_price = 200
# input を用いて入力を受け取り、変数 input_count に代入してください
input_count =input("購入するりんごの個数を入力してください：")
# input_count を数値として代入してください
count = int(input_count)
total_price = apple_price * count
print('購入するりんごの個数は' + str(count) + '個です')
print('支払い金額は' + str(total_price) + '円です')

fruits = ['apple', 'banana', 'orange']
# リストの末尾に文字列「 grape 」を追加してください
fruits.append("grape")
# 変数 fruits に代入したリストを出力してください
print(fruits)
# インデックス番号が 0 の要素を文字列「 cherry 」に更新してください
fruits[0] = "cherry"
# インデックス番号が 0 の要素を出力してください
print(fruits[0] )

リストには、新しく要素を追加することもできます。
「リスト.append(値)」とすることで、すでに定義されているリストの末尾に新たな要素を追加することができます。

fruits = ['apple', 'banana', 'orange']
# for 文を用いてリストの要素を1つずつ取り出し、「 好きな果物は◯◯です 」と出力してください
for fruit in fruits :
   print("好きな果物は"+fruit+"です")

# 変数 fruits に辞書を代入してください
fruits = {"apple" :"りんご" ,"banana" :"バナナ"}
# 辞書 fruits のキー「 banana 」に対応する値を出力してください
print(fruits["banana"])
# 辞書 fruits を用いて、「 appleは◯◯という意味です 」となるように出力してください
print("appleは" +fruits["apple"] +"という意味です")

辞書名[キー名] = 値と書くことで要素の更新をすることができます。
辞書名[新しいキー名] = 値」と書くことで辞書に新しい要素を追加することができます
例
fruits = {'apple': 100, 'banana': 200, 'orange': 400}
# キー「 banana 」の値を数値 300 に更新してください
fruits["banana"] =300
# キーが「 grape 」、値が数値の 500 の要素を辞書 fruits に追加してください
fruits["grape"] =500
# fruits の値を出力してください
print(fruits)

fruits = {'apple': 'りんご', 'banana': 'バナナ', 'grape': 'ぶどう'}
# for 文を用いて、辞書のキーを1つずつ取り出し、繰り返しの中で「 ◯◯は△△という意味です 」と出力させてください
for fruit_key in fruits :
  print(fruit_key +"は"+ fruits[fruit_key] +"という意味です")

while文
for文以外にもwhile文というものがあります。while文を用いると、「ある条件に当てはまる間、処理を繰り返す」といったことが可能になります。
例
x = 10
# while 文を用いて、「変数 x が 0 より大きい」間、繰り返される繰り返し処理を作ってください
while x>0:
    # 変数 x を出力してください
    print(x)
    # 変数 x から 1 引いてください
    x -=1

break
の途中で強制的に終了するための方法
例
numbers = [765, 921, 777, 256]
for number in numbers:
    print(number)
    # 変数 number が 777 のとき「 777が見つかったので処理を終了します 」と出力した後、処理を終了させてください
    if number ==777:
        print("777が見つかったので処理を終了します")
        break

continue
繰り返し処理を終了するbreakと違い、continueはその周の処理だけをスキップすることができます。
例
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
for number in numbers:
    # 変数 number の値が 3 の倍数のとき、繰り返し処理をスキップしてください
    if number%3==0:
        continue
    print(number)


# 変数 money に数値 1000 を代入してください
money = 1000

items = {'apple': 100, 'banana': 200, 'orange': 400}
for item_name in items:
    print('--------------------------------------------------')
    # 変数 money を用いて「 財布には◯◯円入っています 」のように出力してください
    print("財布には" +str(money) +"円入っています")
    
    print(item_name + 'は1個' + str(items[item_name]) + '円です')
    
    input_count = input('購入する' + item_name + 'の個数を入力してください：')
    print('購入する' + item_name + 'の個数は' + input_count + '個です')
    
    count = int(input_count)
    total_price = items[item_name] * count
    print('支払い金額は' + str(total_price) + '円です')
    
    # money と total_price の比較結果によって条件を分岐してください
    if money >= total_price:
        print(item_name +"を"+ input_count+"個買いました")
        money -=total_price
    else:
        print("お金が足りません")
        print(item_name + "を買えませんでした")

money = 1000
items = {'apple': 100, 'banana': 200, 'orange': 400}
for item_name in items:
    print('--------------------------------------------------')
    print('財布には' + str(money) + '円入っています')
    print(item_name + 'は1個' + str(items[item_name]) + '円です')
    
    input_count = input('購入する' + item_name + 'の個数を入力してください：')
    print('購入する' + item_name + 'の個数は' + input_count + '個です')
    
    count = int(input_count)
    total_price = items[item_name] * count
    print('支払い金額は' + str(total_price) + '円です')
    
    if money >= total_price:
        print(item_name + 'を' + input_count + '個買いました')
        money -= total_price
        # if 文を用いて、 money の値が 0 のときの条件を分岐してください
    if money == 0:
         print("財布が空になりました")
         break
    else:
        print('お金が足りません')
        print(item_name + 'を買えませんでした')
# 変数 money と型変換を用いて、「 残金は◯◯円です 」となるように出力してください
print("残金は"+str(money) +"円です")

関数の作り方
関数は「def 関数名():」のように定義します。　　　　　関数名()のように() をつけて呼び出します。
例
# 関数 print_hand を定義してください
def print_hand():
    print("グーを出しました")
# 関数 print_hand を呼び出してください
print_hand()

引数
関数を呼び出す際に、関数に値を渡すことができます。
この値のことを引数といい、引数を渡すと関数の中でその値を利用することができるようになります。
関数に引数を渡すには、まず引数を受け取れる関数を定義しなければなりません。そのためには、関数の定義部分で、引数を受け取るための箱となる変数（仮引数（かりひきすう））を指定します。
関数に引数を渡すには、関数名(引数)として関数を呼び出します
例
# 引数を受け取れるようにしてください
def print_hand(hand):
    # 「 ◯◯を出しました 」と出力されるように書き換えてください
    print(hand+'を出しました')
# 引数に文字列「 グー 」を入れてください
print_hand("グー")
# 引数を文字列「 パー 」として関数 print_hand を呼び出してください
print_hand("パー")

def print_hand(hand,name):で関数を２つ定義可能
# 第2引数に文字列「 コンピューター 」を入れてください
print_hand('パー',"コンピューター")

引数の初期値
引数には初期値を設定することもできます
def print_hand(hand, name= "ゲスト"):

if player_name == "":←　で名前が空のif文が作成可能


def validate(hand):
    # hand の値によって条件分岐してください
    if hand < 0 or hand > 2:
        return False
    else:
        return True
def print_hand(hand, name='ゲスト'):
    hands = ['グー', 'チョキ', 'パー']
    print(name + 'は' + hands[hand] + 'を出しました')
print('じゃんけんをはじめます')
player_name = input('名前を入力してください：')
print('何を出しますか？（0: グー, 1: チョキ, 2: パー）')
player_hand = int(input('数字で入力してください：'))
# 関数 validate の戻り値が True の場合、以下の if~else 文が実行されるようにしてください
if validate(player_hand):
    if player_name == '':
        print_hand(player_hand)
    else:
        print_hand(player_hand, player_name)
# 関数 validate の戻り値が False の場合「 正しい数値を入力してください 」と出力してください
else:
    print('正しい数値を入力してください')

returnの性質
returnは戻り値を呼び出し元に返すだけでなく、関数内の処理を終了させる性質も持っています。
よって、return以降の関数の処理が実行されることはありません。

モジュール
モジュールとは、Pythonのコードが書かれたファイルのことです。
別ファイルをモジュールとして読み込むことでそこに書かれたコードを利用することができます。
モジュール名.関数名()」と書くことで、モジュール内の関数を実行することができます。

import
importを使うことでモジュールを読み込むことができます。
モジュールを読み込んで使いたいファイルに、「import モジュール名」と書くことで読み込むことができます。モジュール名はファイル名から拡張子（.py）を取り除いたものとなります。

randomモジュール
randomモジュールに用意されている関数randintを用いて、コンピュータの出す手がランダムになるようにしましょう。
random.randint(x, y)と書くことで、xからyまでの整数をランダムに取得することができます。
例
 # randint を用いて 0 から 2 までの数値を取得し、変数 computer_hand に代入してください
    computer_hand = random.randint(0,2)

クラスの定義
クラスは「class クラス名:」とすることで定義できます。また、クラス名は「MenuItem」のように大文字で始めるようにします
まだ処理を追加する必要がないので、「pass」と書きましょう（これは何も処理がないことを表しています）。
例
class MenuItem:
    pass

インスタンスの生成
「変数名 = クラス名()」とすることで、生成したインスタンスを変数に代入することができます。
例
class MenuItem:
    pass
# MenuItem クラスのインスタンスを生成してください
menu_item1 = MenuItem()

インスタンス変数
menu_item1.name = 'サンドイッチ'」とすることで、menu_item1に「name」が「サンドイッチ」であるという情報を追加することができます。
この時、「name」のことを「インスタンス変数」と呼びますので覚えておきましょう。
インスタンス.インスタンス変数名」とすることで、そのインスタンス変数の値を用いることができます
例
class MenuItem:
    pass
menu_item1 = MenuItem()
menu_item1.name = 'サンドイッチ'
print(menu_item1.name)
# menu_item1 の price に 500 を代入してください
menu_item1.price = 500
# menu_item1 の price を出力してください
print(menu_item1.price)

クラスの中では関数を定義することができます。クラスの中で定義した関数のことをメソッドと呼びます。
メソッドの定義の方法は通常の関数と同じですが、第1引数にselfを追加する必要があることに注意しましょう。
クラスの中で定義したメソッドは、インスタンスに対して使うように呼び出します。具体的には、「インスタンス.メソッド名()」とすることで、そのメソッドを呼び出す
例
class MenuItem:
    # info メソッドを定義してください
    def info(self):
        print("メニューの名前と値段が表示されます")
menu_item1 = MenuItem()
menu_item1.name = 'サンドイッチ'
menu_item1.price = 500
# menu_item1 に対して info メソッドを呼び出してください
menu_item1.info()
menu_item2 = MenuItem()
menu_item2.name = 'チョコケーキ'
menu_item2.price = 400
# menu_item2 に対して info メソッドを呼び出してください
menu_item2.info()

インスタンスメソッドのself
インスタンスメソッドの第1引数に指定した「self」には、そのメソッドを呼び出したインスタンス自身が代入されています。
そのため、下の図のようにメソッド内で「self.name」とすることで、そのメソッドを呼び出している「menu_item1」の「name」の値を取得することができます。
例
class MenuItem:
    def info(self):
        # 「 ○○: ¥□□ 」となるように出力してください
        print(self.name+": ¥"+ str(self.price))
menu_item1 = MenuItem()
menu_item1.name = 'サンドイッチ'
menu_item1.price = 500
menu_item1.info()
menu_item2 = MenuItem()
menu_item2.name = 'チョコケーキ'
menu_item2.price = 400
menu_item2.info()

合計金額を求めるメソッド
インスタンスメソッドに引数を渡す場合、メソッドの定義側では「self」の分だけ引数の順番がずれること
例
class MenuItem:
    def info(self):
        return self.name + ': ¥' + str(self.price)

    # get_total_price メソッドを定義してください
    def get_total_price(self,count):
        total_price= self.price * count
        return total_price

menu_item1 = MenuItem()
menu_item1.name = 'サンドイッチ'
menu_item1.price = 500
print(menu_item1.info())
# get_total_price メソッドを呼び出してください
result = menu_item1.get_total_price(4)
# 「 合計は〇〇円です 」となるように出力してください
print("合計は"+ str(result)+"円です")

__init__メソッド
。__init__メソッドは、「クラス名()」でインスタンスを生成した直後に自動で呼び出されます
例
class MenuItem:
    # __init__ メソッドを定義してください
    def __init__(self):
        print("MenuItemクラスのインスタンスが生成されました！")

    def info(self):
        return self.name + ': ¥' + str(self.price)

    def get_total_price(self, count):
        total_price = self.price * count
        return total_price


__init__メソッドでインスタンス変数を扱う
self.変数名 = 値」でインスタンス変数に値を代入できます。
例
class MenuItem:
    # 引数 name と price を受け取るようにしてください
    def __init__(self,name, price  ):
        # 「 サンドイッチ 」の代わりに引数 name の値を代入してください
        self.name = name
        # 500 の代わりに引数 price の値を代入してください
        self.price = price
    def info(self):
        return self.name + ': ¥' + str(self.price)
    def get_total_price(self, count):
        total_price = self.price * count
        return total_price
# 引数を「 サンドイッチ 」と 500 としてください
menu_item1 = MenuItem("サンドイッチ" ,500)
print(menu_item1.info())
result = menu_item1.get_total_price(4)
print('合計は' + str(result) + '円です')

クラスを直接読み込む
importには、より便利な方法が用意されています。
from モジュール名 import クラス名」とすることで、そのモジュール内の指定したクラスを直接読み込むことができます。
例
# menu_item.py から MenuItem クラスを読み込んでください
from menu_item import MenuItem

繰り返し処理で番号をつける
目標物では、メニュー名の左に0から順番に番号がついていました。
番号をつけるには、番号を保存するための変数をfor文の外で用意して、for文の処理の中で値を1だけ増やして更新するようにします。
例
from menu_item import MenuItem
menu_item1 = MenuItem('サンドイッチ', 500)
menu_item2 = MenuItem('チョコケーキ', 400)
menu_item3 = MenuItem('コーヒー', 300)
menu_item4 = MenuItem('オレンジジュース', 200)
menu_items = [menu_item1, menu_item2, menu_item3, menu_item4]
# 変数 index を定義し、数値の 0 を代入してください
index = 0
for item in menu_items:
    # 「 0. サンドイッチ: ¥500 」となるように出力してください
    print(str(index)+"."+item.info())    
    # 変数 index に 1 を加えてください
    index +=1

合計金額を1割引にする
MenuItemクラス内に定義した「get_total_price」メソッド内で、引数countの値が3以上の場合には結果を1割引（90%の値段）にしてみましょう。
数値の計算では小数を使うことも可能です。今回は、変数total_priceの値に「0.9」をかけてみましょう。

四捨五入
整数と小数を計算した結果は、小数で出力されてしまいます。
今回は料金なので整数で出力するようにしましょう。round(小数)とすることで、その小数を四捨五入した結果の整数を取得することができます。
例
menu_item。pyの中身
class MenuItem:
    def __init__(self, name, price):
        self.name = name
        self.price = price

    def info(self):
        return self.name + ': ¥' + str(self.price)

    def get_total_price(self, count):
        total_price = self.price * count
        
        # count が 3 以上のとき、 total_price に 0.9 をかけてください
        if count >= 3:
            total_price  *= 0.9
        
        # total_price を四捨五入して、 return してください
        return round(total_price)

script.pyの中身
from menu_item import MenuItem

menu_item1 = MenuItem('サンドイッチ', 500)
menu_item2 = MenuItem('チョコケーキ', 400)
menu_item3 = MenuItem('コーヒー', 300)
menu_item4 = MenuItem('オレンジジュース', 200)

menu_items = [menu_item1, menu_item2, menu_item3, menu_item4]

index = 0

for item in menu_items:
    print(str(index) + '. ' + item.info())
    index += 1

print('--------------------')

order = int(input('メニューの番号を入力してください: '))
selected_menu = menu_items[order]
print('選択されたメニュー: ' + selected_menu.name)

# コンソールから入力を受け取り、変数 count に代入してください
count =int(input("個数を入力してください(3つ以上で1割引): "))

# get_total_price メソッドを呼び出してください
result = selected_menu.get_total_price(count)

# 「 合計は〇〇円です 」となるように出力してください
print("合計は"+str(result)+"円です")

継承
あるクラスを元にして新たなクラスをつくることを「継承」と呼びます。
「class 新しいクラス名(元となるクラス名):」とすることで他のクラスを継承して、新しいクラスを定義することができます。
このとき、新しいクラスは「子クラス」、元となるクラスは「親クラス」と呼ばれます。
例
# from と import を用いて、 MenuItem クラスを読み込んでください
from menu_item import MenuItem 
# MenuItem クラスを継承して、 Food クラスを定義してください
class Food(MenuItem):
    pass

script.pyの内容
from food import Food
from drink import Drink
food1 = Food('サンドイッチ', 500)
# food1 の calorie に 330 を代入してください
food1.calorie = 330
# food1 に対して calorie_info メソッドを呼び出してください
food1.calorie_info()

food.pyの内容
from menu_item import MenuItem
class Food(MenuItem):
    # calorie_info メソッドを定義してください
    def calorie_info(self):
        print(str(self.calorie) + 'kcalです')
    
オーバーライド
親クラスにあるメソッドと同じ名前のメソッドを子クラスで定義すると、メソッドを上書きすることができます。これをメソッドの「オーバーライド」と呼びます。
オーバーライドをすると、子クラスのインスタンスは親クラスのメソッドではなく、子クラスで定義したメソッドを呼び出すようになります。
子クラスで定義したメソッドを優先して呼び出すようになっています。したがって、子クラスと親クラスに同名のメソッドがある場合は、メソッドの内容が上書きされたようになります。
例
food.pyの中身
from menu_item import MenuItem

class Food(MenuItem):
    # info メソッドを定義してください
    def info(self):
         return self.name + ': ¥' + str(self.price) + ' (' + str(self.calorie) + 'kcal)'

    def calorie_info(self):
        print(str(self.calorie) + 'kcalです')

cript.pyの中身
from food import Food
from drink import Drink

food1 = Food('サンドイッチ', 500)
food1.calorie = 330

# food1 に対して info メソッドを呼び出して戻り値を出力してください
print (food1.info())

__init__メソッドのオーバーライド
今回はFoodクラス内で、MenuItemクラスの__init__メソッドを上書きしてみましょう。下の図のように、オーバーライドする場合には、引数の数などを変えることも可能です。

super()
オーバーライドしたメソッドの中で「super()」とすることで、親クラスを呼び出すことができます。「super().メソッド名()」とすることで、親クラス内に定義されたインスタンスメソッドをそのまま利用することが可能です。
例
from menu_item import MenuItem
class Food(MenuItem):
    def __init__(self, name, price, calorie):
        # super() を用いて、親クラスの __init__() を呼び出してください
        super().__init__(name,price)
        self.calorie = calorie
    def info(self):
        return self.name + ': ¥' + str(self.price) + ' (' + str(self.calorie) + 'kcal)'
    def calorie_info(self):
        print(str(self.calorie) + 'kcalです')
